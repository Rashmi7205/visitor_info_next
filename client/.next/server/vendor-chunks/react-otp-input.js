"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-otp-input";
exports.ids = ["vendor-chunks/react-otp-input"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-otp-input/lib/index.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-otp-input/lib/index.esm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OTPInput)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar isStyleObject = function (obj) { return typeof obj === 'object' && obj !== null; };\nvar OTPInput = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? '' : _b, _c = _a.numInputs, numInputs = _c === void 0 ? 4 : _c, onChange = _a.onChange, onPaste = _a.onPaste, renderInput = _a.renderInput, _d = _a.shouldAutoFocus, shouldAutoFocus = _d === void 0 ? false : _d, _e = _a.inputType, inputType = _e === void 0 ? 'text' : _e, renderSeparator = _a.renderSeparator, placeholder = _a.placeholder, containerStyle = _a.containerStyle, inputStyle = _a.inputStyle, _f = _a.skipDefaultStyles, skipDefaultStyles = _f === void 0 ? false : _f;\n    var _g = react__WEBPACK_IMPORTED_MODULE_0___default().useState(0), activeInput = _g[0], setActiveInput = _g[1];\n    var inputRefs = react__WEBPACK_IMPORTED_MODULE_0___default().useRef([]);\n    var getOTPValue = function () { return (value ? value.toString().split('') : []); };\n    var isInputNum = inputType === 'number' || inputType === 'tel';\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function () {\n        inputRefs.current = inputRefs.current.slice(0, numInputs);\n    }, [numInputs]);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function () {\n        var _a;\n        if (shouldAutoFocus) {\n            (_a = inputRefs.current[0]) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n    }, [shouldAutoFocus]);\n    var getPlaceholderValue = function () {\n        if (typeof placeholder === 'string') {\n            if (placeholder.length === numInputs) {\n                return placeholder;\n            }\n            if (placeholder.length > 0) {\n                console.error('Length of the placeholder should be equal to the number of inputs.');\n            }\n        }\n        return undefined;\n    };\n    var isInputValueValid = function (value) {\n        var isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n        return isTypeValid && value.trim().length === 1;\n    };\n    var handleChange = function (event) {\n        var value = event.target.value;\n        if (isInputValueValid(value)) {\n            changeCodeAtFocus(value);\n            focusInput(activeInput + 1);\n        }\n    };\n    var handleInputChange = function (event) {\n        var nativeEvent = event.nativeEvent;\n        var value = event.target.value;\n        if (!isInputValueValid(value)) {\n            // Pasting from the native autofill suggestion on a mobile device can pass\n            // the pasted string as one long input to one of the cells. This ensures\n            // that we handle the full input and not just the first character.\n            if (value.length === numInputs) {\n                var hasInvalidInput = value.split('').some(function (cellInput) { return !isInputValueValid(cellInput); });\n                if (!hasInvalidInput) {\n                    handleOTPChange(value.split(''));\n                    focusInput(numInputs - 1);\n                }\n            }\n            // @ts-expect-error - This was added previously to handle and edge case\n            // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n            // still needed.\n            if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n                event.preventDefault();\n                changeCodeAtFocus('');\n                focusInput(activeInput - 1);\n            }\n            // Clear the input if it's not valid value because firefox allows\n            // pasting non-numeric characters in a number type input\n            event.target.value = '';\n        }\n    };\n    var handleFocus = function (event) { return function (index) {\n        setActiveInput(index);\n        event.target.select();\n    }; };\n    var handleBlur = function () {\n        setActiveInput(activeInput - 1);\n    };\n    var handleKeyDown = function (event) {\n        var otp = getOTPValue();\n        if ([event.code, event.key].includes('Backspace')) {\n            event.preventDefault();\n            changeCodeAtFocus('');\n            focusInput(activeInput - 1);\n        }\n        else if (event.code === 'Delete') {\n            event.preventDefault();\n            changeCodeAtFocus('');\n        }\n        else if (event.code === 'ArrowLeft') {\n            event.preventDefault();\n            focusInput(activeInput - 1);\n        }\n        else if (event.code === 'ArrowRight') {\n            event.preventDefault();\n            focusInput(activeInput + 1);\n        }\n        // React does not trigger onChange when the same value is entered\n        // again. So we need to focus the next input manually in this case.\n        else if (event.key === otp[activeInput]) {\n            event.preventDefault();\n            focusInput(activeInput + 1);\n        }\n        else if (event.code === 'Spacebar' ||\n            event.code === 'Space' ||\n            event.code === 'ArrowUp' ||\n            event.code === 'ArrowDown') {\n            event.preventDefault();\n        }\n    };\n    var focusInput = function (index) {\n        var _a, _b;\n        var activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n        if (inputRefs.current[activeInput]) {\n            (_a = inputRefs.current[activeInput]) === null || _a === void 0 ? void 0 : _a.focus();\n            (_b = inputRefs.current[activeInput]) === null || _b === void 0 ? void 0 : _b.select();\n            setActiveInput(activeInput);\n        }\n    };\n    var changeCodeAtFocus = function (value) {\n        var otp = getOTPValue();\n        otp[activeInput] = value[0];\n        handleOTPChange(otp);\n    };\n    var handleOTPChange = function (otp) {\n        var otpValue = otp.join('');\n        onChange(otpValue);\n    };\n    var handlePaste = function (event) {\n        var _a;\n        event.preventDefault();\n        var otp = getOTPValue();\n        var nextActiveInput = activeInput;\n        // Get pastedData in an array of max size (num of inputs - current position)\n        var pastedData = event.clipboardData\n            .getData('text/plain')\n            .slice(0, numInputs - activeInput)\n            .split('');\n        // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n        if (isInputNum && pastedData.some(function (value) { return isNaN(Number(value)); })) {\n            return;\n        }\n        // Paste data from focused input onwards\n        for (var pos = 0; pos < numInputs; ++pos) {\n            if (pos >= activeInput && pastedData.length > 0) {\n                otp[pos] = (_a = pastedData.shift()) !== null && _a !== void 0 ? _a : '';\n                nextActiveInput++;\n            }\n        }\n        focusInput(nextActiveInput);\n        handleOTPChange(otp);\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", { style: Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle), className: typeof containerStyle === 'string' ? containerStyle : undefined, onPaste: onPaste }, Array.from({ length: numInputs }, function (_, index) { return index; }).map(function (index) {\n        var _a, _b, _c;\n        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), { key: index },\n            renderInput({\n                value: (_a = getOTPValue()[index]) !== null && _a !== void 0 ? _a : '',\n                placeholder: (_c = (_b = getPlaceholderValue()) === null || _b === void 0 ? void 0 : _b[index]) !== null && _c !== void 0 ? _c : undefined,\n                ref: function (element) { return (inputRefs.current[index] = element); },\n                onChange: handleChange,\n                onFocus: function (event) { return handleFocus(event)(index); },\n                onBlur: handleBlur,\n                onKeyDown: handleKeyDown,\n                onPaste: handlePaste,\n                autoComplete: 'off',\n                'aria-label': \"Please enter OTP character \".concat(index + 1),\n                style: Object.assign(!skipDefaultStyles ? { width: '1em', textAlign: 'center' } : {}, isStyleObject(inputStyle) ? inputStyle : {}),\n                className: typeof inputStyle === 'string' ? inputStyle : undefined,\n                type: inputType,\n                inputMode: isInputNum ? 'numeric' : 'text',\n                onInput: handleInputChange,\n            }, index),\n            index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)));\n    })));\n};\n\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-otp-input/lib/index.esm.js\n");

/***/ })

};
;